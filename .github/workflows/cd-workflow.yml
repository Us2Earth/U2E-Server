name: CD with Gradle and Docker (Blue-Green)

on:
  push:
    branches:
      - 'develop'
      - 'main'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v4

      # JDK 설정 (Java 21)
      - name: ☕️ Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      # Gradle 캐시
      - name: 🐘 Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # gradlew 실행 권한 부여
      - name: 👏🏻 Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 (테스트 제외)
      - name: 🐘 Build with Gradle (without test)
        run: ./gradlew clean build -x test --stacktrace

      # Docker 이미지 빌드 & 푸시
      - name: 🐳 Docker build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}

      # Actions 서버의 Public IP 획득
      - name: 🫴🏻 Get Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      # AWS 자격증명 설정
      - name: 🪪 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-northeast-2'

      # EC2 보안그룹에 임시로 GitHub Actions IP 추가 (SSH 허용)
      - name: ➕ Add GitHub Actions IP
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # docker-compose.yml + deploy.sh 파일을 EC2로 전송
      - name: ✉️ Send docker-compose.yml & deploy.sh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          source: "./docker-compose.yml,./deploy.sh"
          target: "/home/ec2-user/"

      # EC2에서 Blue-Green 배포 실행
      - name: 🚀 Deploy to server (Blue-Green)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            echo "🗂️ Move to EC2 home directory"
            cd /home/ec2-user

            echo "🔧 Set execute permission for deploy.sh"
            chmod +x ./deploy.sh

            echo "🧾 Check docker compose version"
            docker compose version || docker-compose --version

            echo "🚀 Run Blue-Green Deployment Script"
            ./deploy.sh

      # 배포 후 보안그룹 SSH 규칙 제거
      - name: ❌ Remove GitHub Actions IP
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32