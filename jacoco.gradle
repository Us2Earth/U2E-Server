jacoco {
    toolVersion = "0.8.12"
}

lombok.addLombokGeneratedAnnotation = true

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy tasks.jacocoTestReport
}

tasks.named('jacocoTestReport', JacocoReport) {
    dependsOn(tasks.test)

    def mainClasses = files(sourceSets.main.output).asFileTree.matching {
        exclude(
                "**/generated/**",
                "**/build/**",
                "**/*application*",
                "**/*config*",
                "**/*dto*",
                "**/*request*",
                "**/*response*",
                "**/generated/querydsl/**",
                "**/Q*.*"
        )
    }

    additionalSourceDirs.from files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom(mainClasses)
    executionData.from fileTree(project.rootDir) {
        include "**/build/jacoco/*.exec"
    }

    reports {
        html.required.set(true) // 로컬 확인용 HTML 리포트 생성
        html.outputLocation.set(layout.buildDirectory.dir("reports/test/jacocoTestReportHtml"))

        xml.required.set(true)  // SonarCloud 업로드용 XML 리포트 생성
        xml.outputLocation.set(layout.buildDirectory.file("reports/test/jacocoTestReport.xml"))

        csv.required.set(false) // CSV 비활성화
    }
}

tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification) {
    dependsOn(tasks.test)

    classDirectories.setFrom(
            files(sourceSets.main.output).asFileTree.matching {
                exclude(
                        "**/generated/**",
                        "**/build/**",
                        "**/*application*",
                        "**/*config*",
                        "**/*dto*",
                        "**/*request*",
                        "**/*response*",
                        "**/generated/querydsl/**",
                        "**/Q*.*"
                )
            }
    )

    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('jacocoTestCoverageVerification')
}

apply from: "$rootDir/jacoco.gradle"